# Dein settings for vim8
[[plugins]]
repo = 'roxma/nvim-yarp'
if = "!has('nvim')"
[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if = "!has('nvim')"

# Directory tree view
[[plugins]]
repo = 'dff9th/nerdtree'
on_cmd = ['NERDTreeToggle']
hook_add = '''
  nnoremap <silent><C-n> :NERDTreeToggle<CR>
'''

# Auto set paste at paste
[[plugins]]
repo = 'ConradIrwin/vim-bracketed-paste'
on_event = 'InsertEnter'

# Color scheme
[[plugins]]
repo = 'tomasr/molokai'
hook_add = '''
  autocmd ColorScheme * highlight Comment ctermfg=28  guifg=#008800
  autocmd ColorScheme * highlight LineNr  ctermfg=136 guifg=#d9a62e
  colorscheme molokai
'''

# Status line
[[plugins]]
repo = 'itchyny/lightline.vim'
[[plugins]]
repo = 'josa42/vim-lightline-coc'
hook_add = '''
  "set statusline^=%{coc#status()}

  let g:lightline = {
  \ 'active': {
  \   'left': [
  \     [ 'mode', 'paste' ],
  \     [ 'readonly', 'filename', 'modified' ],
  \     [ 'coc_errors', 'coc_warnings', 'coc_ok' ],
  \     [ 'coc_status' ]
  \   ],
  \ },
  \ 'component_function': {
  \   'filename': 'LightlineFilename'
  \ }
  \}

  " Draw filename with relative path
  function! LightlineFilename()
    let root = fnamemodify(get(b:, 'git_dir'), ':h')
    let path = expand('%:p')
    if path[:len(root)-1] ==# root
      return path[len(root)+1:]
    endif
    return expand('%')
  endfunction

  " Use auocmd to force lightline update.
  autocmd User CocStatusChange,CocDiagnosticChange call lightline#update()

  " register compoments:
  call lightline#coc#register()
'''

# Vim setting for any projects
[[plugins]]
repo = 'embear/vim-localvimrc'
hook_add = '''
  let g:localvimrc_sandbox = 0
  let g:localvimrc_ask = 0
'''

# Insert snippet
[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# LSP
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
hook_add = '''
  " Formatting selected code.
  xmap f <Plug>(coc-format-selected)
  nmap f <Plug>(coc-format-selected)

  " Run completion manuallty
  inoremap <silent><expr> <c-f> coc#refresh()
'''
